/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ColumnResizeMode } from "@tanstack/table-core";
export namespace Components {
    interface EventListener {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SimpleCounter {
        "color": string;
        "decrease_text": string;
        "increase_text": string;
    }
    interface TableColumnSizing {
        "column_resize_mode": ColumnResizeMode;
    }
    interface TableExpanding {
    }
}
export interface SimpleCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSimpleCounterElement;
}
declare global {
    interface HTMLEventListenerElement extends Components.EventListener, HTMLStencilElement {
    }
    var HTMLEventListenerElement: {
        prototype: HTMLEventListenerElement;
        new (): HTMLEventListenerElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSimpleCounterElement extends Components.SimpleCounter, HTMLStencilElement {
    }
    var HTMLSimpleCounterElement: {
        prototype: HTMLSimpleCounterElement;
        new (): HTMLSimpleCounterElement;
    };
    interface HTMLTableColumnSizingElement extends Components.TableColumnSizing, HTMLStencilElement {
    }
    var HTMLTableColumnSizingElement: {
        prototype: HTMLTableColumnSizingElement;
        new (): HTMLTableColumnSizingElement;
    };
    interface HTMLTableExpandingElement extends Components.TableExpanding, HTMLStencilElement {
    }
    var HTMLTableExpandingElement: {
        prototype: HTMLTableExpandingElement;
        new (): HTMLTableExpandingElement;
    };
    interface HTMLElementTagNameMap {
        "event-listener": HTMLEventListenerElement;
        "my-component": HTMLMyComponentElement;
        "simple-counter": HTMLSimpleCounterElement;
        "table-column-sizing": HTMLTableColumnSizingElement;
        "table-expanding": HTMLTableExpandingElement;
    }
}
declare namespace LocalJSX {
    interface EventListener {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SimpleCounter {
        "color"?: string;
        "decrease_text"?: string;
        "increase_text"?: string;
        "onDidReset"?: (event: SimpleCounterCustomEvent<string>) => void;
    }
    interface TableColumnSizing {
        "column_resize_mode"?: ColumnResizeMode;
    }
    interface TableExpanding {
    }
    interface IntrinsicElements {
        "event-listener": EventListener;
        "my-component": MyComponent;
        "simple-counter": SimpleCounter;
        "table-column-sizing": TableColumnSizing;
        "table-expanding": TableExpanding;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "event-listener": LocalJSX.EventListener & JSXBase.HTMLAttributes<HTMLEventListenerElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "simple-counter": LocalJSX.SimpleCounter & JSXBase.HTMLAttributes<HTMLSimpleCounterElement>;
            "table-column-sizing": LocalJSX.TableColumnSizing & JSXBase.HTMLAttributes<HTMLTableColumnSizingElement>;
            "table-expanding": LocalJSX.TableExpanding & JSXBase.HTMLAttributes<HTMLTableExpandingElement>;
        }
    }
}
